max(data[data$Month == 5, ]$Ozone)
data[data$Month == 5
]
data[data$Month == 5, ]
max(data[data$Month == 5, ]$Ozone, na.rm=TRUE)
mean(data[data$Temp > 90, ]$Solar.R, na.rm=TRUE)
high_temp = data[data$Temp > 90, ]
high_temp
high_temp_ozone = high_temp[high_temp$Ozone > 31, ]
high_temp_ozone
mean(high_temp_ozone$Solar.R)
mean(high_temp_ozone$Solar.R, na.rm=TRUE)
install.packages("devtools")
library('devtools')
find_rtools()
a <- available_packages()
a <- available.packages()
a
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
library(iris)
library(datasets)
data(iris)
data(mtcars)
tapply(iris, iris[iris$Species == 'virginica'], mean)
tapply(iris, iris[iris$Species == 'virginica', ], mean)
iris$Species == 'virginica'
tapply(iris, iris$Species == 'virginica', mean)
tapply(iris$Sepal.Length, iris$Species == 'virginica', mean)
?gl
gl(3, 10)
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
split(iris, iris$Species)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars
?interaction
split(mtcars$mpg, mtcars$cyl)
x <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
x$4
?abs
abs(x[1] - x[3])
source('~/GitHub/datasciencecoursera/r_programming/week_three/cache_vector.R')
cachemean(c(1,2,3,4,5,6))
makeVector(c(1,2,3,4,5,6,10))
beh <- makeVector(c(1,2,3,4,5,6,10))
cachemean(beh)
mean(c(1,2,3,4,5,6,10))
cachemean(beh)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(c(4,3,1,9,4,8,10,2,4), ncols=3, nrows=3)
mat <- matrix(c(4,3,1,9,4,8,10,2,4), ncol=3, nrow=3)
mat
solve(mat)
makeCacheMatrix(mat)
cmat <- makeCacheMatrix(mat)
cacheSolve(cmat)
cacheSolve(cmat)
solve
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cmat <- makeCacheMatrix(mat)
cacheSolve(cmat)
cacheSolve(cmat)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cmat <- makeCacheMatrix(mat)
cacheSolve(cmat)
cacheSolve(cmat)
source('~/.active-rstudio-document')
beh <- makeCacheMatrix(mat)
cacheSolve(beh)
source('~/.active-rstudio-document')
beh <- makeCacheMatrix(mat)
source('~/.active-rstudio-document')
cacheSolve(beh)
source('~/.active-rstudio-document')
beh <- makeCacheMatrix(mat)
cacheSolve(beh)
source('~/.active-rstudio-document')
beh <- makeCacheMatrix(mat)
cacheSolve(beh)
cacheSolve(beh)
setwd('c:\\users\\jmcdermo\\Documents\\GitHub\\datasciencecoursera\\r_programming\\week_four\\')
source('~/GitHub/datasciencecoursera/r_programming/week_four/hospital.R')
outcome <- read.csv("data\\outcome-of-care-measures.csv", colClasses = "character")
head outcome
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
setwd('c:\\users\\jmcdermo\\Documents\\GitHub\\datasciencecoursera\\r_programming\\week_four\\')
outcome <- read.csv("data\\outcome-of-care-measures.csv", colClasses = "character")
str(outcome)
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart')
best('TX', 'heart attack')
best('TX', 'heart attack')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart attack')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart attack')
?rbind
cbind
?cbind
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart attack')
raw_data <- read.csv("data\\outcome-of-care-measures.csv", colClasses = "character")
results <- cbind(raw_data[,7], as.numeric(raw_data[, 11]))
str(results)
summary(results)
as.numeric(raw_data[, heart_attack_idx])
as.numeric(raw_data[, 7])
as.numeric(raw_data[, 11])
a <- c(1,2,3,4)
b <- c(5,6,7,8)
cbind(a,b)
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
setwd('c:\\users\\jmcdermo\\Documents\\GitHub\\datasciencecoursera\\r_programming\\week_four\\data\\')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
outcome('TX', 'heart failure')
best('TX', 'heart failure')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart failure')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TXt', 'heart failure')
best('TX', 'heart failure')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart failure')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart failure')
?which
raw_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospital_idx <- 2
state_idx <- 7
heart_attack_idx <- 11
heart_failure_idx <- 17
pnemonia_idx <- 23
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
state_data <- raw_data[,state_idx]
hospital_name_data <- raw_data[,hospital_idx]
if (!state %in% state_data) {
stop('invalid state')
}
if (outcome == 'heart attack') {
outcome_data <- as.numeric(raw_data[, heart_attack_idx])
}
else if (outcome == 'heart failure') {
outcome_data <- as.numeric(raw_data[, heart_failure_idx])
}
else if (outcome == 'pnemonia') {
outcome_data <- as.numeric(raw_data[, pnemonia_idx])
}
else {
stop('invalid outcome')
}
results <- cbind(state, hospital_name_data, outcome_data)
which(results$state_data == state && max(outcome_data))
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart failure')
results <- best('TX', 'heart failure')
which(results$state_data == 'TX')
str(results)
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
results <- best('TX', 'heart failure')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
results <- best('TX', 'heart failure')
df
which(results$state_data == state && max(outcome_data))
which(results$state_data == 'TX' && max(outcome_data))
which(results$state_data == 'TX' && max(results$mortality))
which(results$state_data == 'TX')
results[results$state_data == 'TX']
str(results)
results[results$mortality >= max(results$mortality)]
results[,results$mortality >= max(results$mortality)]
max(results$mortality)
?max
max(results$mortality, na.rm=TRUE)
results[,results$mortality >= max(results$mortality, na.rm=TRUE)]
results[results$mortality >= max(results$mortality, na.rm=TRUE)]
results[[results$mortality >= max(results$mortality, na.rm=TRUE)]]
results[results$mortality >= max(results$mortality, na.rm=TRUE)]
results[results$mortality >= max(results$mortality, na.rm=TRUE), ]
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
results[results$mortality >= max(results$mortality, na.rm=TRUE), ]
results <- best('TX', 'heart failure')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
results <- best('TX', 'heart failure')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
results <- best('TX', 'heart failure')
results[results$mortality >= max(results$mortality, na.rm=TRUE), ]
results[results$mortality >= max(results$mortality, na.rm=TRUE), ]$hospital
results[results$mortality >= max(results$mortality, na.rm=TRUE)]$hospital
results[[results$mortality >= max(results$mortality, na.rm=TRUE), ]$hospital
results[[results$mortality >= max(results$mortality, na.rm=TRUE), ]]$hospital
max <- results[results$mortality >= max(results$mortality, na.rm=TRUE)]
max <- results[results$mortality >= max(results$mortality, na.rm=TRUE), ]
max$hospital
max_row <- results[results$mortality >= max(results$mortality, na.rm=TRUE), ]
str(max_row)
max_row$hospital
raw_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
str(raw_data)
raw_data[2,]
raw_data[,2]
state_list <- raw_data[,2]
str(state_list)
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart failure')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best('TX', 'heart failure')
outcome <- best('TX', 'heart failure')
str(outcome)
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
outcome <- best('TX', 'heart failure')
max(outcome$mortality)
str(max(outcome$mortality))
df[df$mortality >= max(df$mortality, na.rm=TRUE), ]
df[df$mortality >= max(df$mortality, na.rm=TRUE), ]
df <- outcome
df[df$mortality >= max(df$mortality, na.rm=TRUE), ]
df[df$mortality >= max(df$mortality, na.rm=TRUE), ][2]
df[df$mortality >= max(df$mortality, na.rm=TRUE), ]$hospital
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
outcome <- best('TX', 'heart failure')
outcome
best("MD", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
split(df, df$state)
raw_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_data <- raw_data[,7]
hospital_name_data <- raw_data[,2]
outcome_data <- as.numeric(raw_data[, 11])
df <- data.frame(state, hospital_name_data, outcome_data)
df <- data.frame(state_data, hospital_name_data, outcome_data)
df <- df[complete.cases(df), ]
df
max_row <- df[df$state == state && df$mortality <= min(df$mortality, na.rm=TRUE), ]
max_row <- df[df$state == 'TX' && df$mortality <= min(df$mortality, na.rm=TRUE), ]
df <- data.frame(c(state_data, hospital_name_data, outcome_data))
str(df)
df <- data.frame(state_data, hospital_name_data, outcome_data)
str(df)
a <- c('a', 'b', 'c')
b <- c('x', 'y', 'z')
c <- c(1,2,3)
df <- data.frame(a,b,c)
df
str(df)
df <- df[df$state == 'TX']
df <- data.frame(state_data, hospital_name_data, outcome_data)
df <- df[df$state == 'TX']
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
best("MD", "heart attack")
best("MD", "pneumonia")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("MD", "pneumonia")
best("TX", "heart attack")
best("BB", "heart attack")
Error in best("NY", "hert attack") : invalid outcome
best("BB", "hart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("BB", "hart attack")
best("TX", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
best("TX", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
setcw('C:\\Users\\jmcdermo\\Documents\\GitHub\\datasciencecoursera\\r_programming\\week_four')
source('~/GitHub/datasciencecoursera/r_programming/week_four/best.R')
setwd('C:\\Users\\jmcdermo\\Documents\\GitHub\\datasciencecoursera\\r_programming\\week_four')
submit()
submit()
submit()
set.seed(1)
rpois(5, 2)
?rbinom
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(11)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(16)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
?rnorm
rnorm(100)
plot(rnorm(100))
plot(rbinom(100))
plot(rbinom(100, 10))
plot(rbinom(100, 10, 0.5))
?rbinorm
?rbinom
x <- rbinom(10, 10, 0.5)
plot(x)
x
set.seed(1)
rpois(5, 2)
?rpois
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
rankhospital('TX', 'meh')
data <- rankhospital('TX', 'meh')
str(data)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
data <- rankhospital('TX', 'meh')
str(data)
?order
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
data <- load_data()
str(df)
str(data)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
data <- rankhospital('TX', 'meh')
data <- rankhospital('TX', 'heart attack')
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
data <- rankhospital('TX', 'heart attack')
data <- load_data()
str(data)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
data <- rankhospital('TX', 'heart attack')
data <- rankhospital('hehe', 'heart attack')
with(data, order('heart_attack', 'hospital'))
order(data$heart_attack, data$hopsital)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
data <- load_data()
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
data <- load_data()
order(data$heart_attack, data$hopsital)
order(data$heart_attack, data$hospital)
outcome <- order(data$heart_attack, data$hospital)
str(outcome)
outcome <- data[order(data$heart_attack, data$hospital)]
outcome <- data[order(data$heart_attack, data$hospital), ]
str(outcome)
split_by_state <- split(data, data$state)
all_split <- split_by_state <- split(data, data$state_name)
all_split$TX
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
data <- rankhospital('TX', 'heart attack')
my_state <- split_by_state$'TX'
my_state
str(my_state)
my_state[order(my_state$pneumonia, my_state$hospital), ]
head(my_state)
head(my_state, 1)
my_state[order(my_state$heart_failure, my_state$hospital), ]
head(my_state[order(my_state$heart_failure, my_state$hospital), ])
head(my_state[order(my_state$heart_failure, my_state$hospital), ], 1)
head(my_state[order(my_state$heart_failure, my_state$hospital), ], 1)$hospital
tail(my_state[order(my_state$heart_failure, my_state$hospital), ], 1)$hospital
my_state <- split_by_state$'MD'
tail(my_state[order(my_state$heart_failure, my_state$hospital), ], 1)$hospital
tail(my_state[order(my_state$heart_attack, my_state$hospital), ], 1)$hospital
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
my_state <- my_state[!is.na(my_state$heart_attack)]
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
my_state <- my_state[!is.na(my_state$heart_attack), ]
tail(my_state[order(my_state$heart_attack, my_state$hospital), ], 1)$hospital
my_state[1, ]$hospital
my_state[41, ]$hospital
my_state[40, ]$hospital
my_state[5000, ]$hospital
my_state[42, ]$hospital
my_state[41, ]$hospital
rankhospital("TX", "heart failure", 4)
!is.na(my_state$heart_failure)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankHospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
lapply(split_by_state, order_by)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
lapply(split_by_state, order_by)
lapply(split_by_state, order_by, 'heart_attack')
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
lapply(split_by_state, order_by, 'heart_attack')
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
my_state[, c('hospital')]
my_state[, c('hospital', 'state_name')]
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
head(rankall("heart attack", 20), 10)
meh <- head(rankall("heart attack", 20), 10)
str(meh)
meh <- rankall("heart attack", 20)
meh
str(meh)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
meh <- rankall("heart attack", 20)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
df <- load_data()
split_by_state <- split(df, df$state_name)
ordered <- lapply(split_by_state, order_by, 'heart_attack')
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
ordered <- lapply(split_by_state, order_by, 'heart_attack')
result <- sapply(ordered, function(x) x[num, c('hospital', 'state_name')])
result <- sapply(ordered, function(x) x[2, c('hospital', 'state_name')])
result <- lapply(ordered, function(x) x[2, c('hospital', 'state_name')])
do.call("rbind", result)
head(rankall("heart attack", 20), 10)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/GitHub/datasciencecoursera/r_programming/week_four/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
seq1 <- seq(1:6)
mat1 <- matrix(seq1, 2)
source('~/.active-rstudio-document')
makeCacheMatrix(mat1)
cmat1 <- makeCacheMatrix(mat1)
cacheSolve(cmat1)
seq1 <- seq(1:9)
mat1 <- matrix(seq1, 3)
cmat1 <- makeCacheMatrix(mat1)
cacheSolve(cmat1)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cmat1 <- makeCacheMatrix(mat1)
cacheSolve(cmat1)
